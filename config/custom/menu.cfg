# TEST CUSTOM LCD MENU ------------------------------------------------------START

[menu __main __octoprint]
type: list
name: OctoPrint
enable: False

[menu __main __control]
type: list
name: Control
enable: False

[menu __main __temp]
type: list
name: Temperature
enable: False

[menu __main __filament]
type: list
name: Filament
enable: False

### menu setup ###
[menu __main __setup]
type: list
name: Setup
enable: False

### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer) and (not printer.idle_timeout.state == "Printing")}
name: SD Card

[menu __main __offsetz]
type: input
enable: {printer.idle_timeout.state == "Printing"}
name: Live adjust Z{'%6.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Tune

[menu __main __tune __speed]
type: input
name: Speed:          {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}
	
[menu __main __tune __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Nozzle:         %3.0f" % (menu.input)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __tune __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:            %3.0f" % (menu.input)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}
	
[menu __main __tune __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed:      {'%3d' % (menu.input*255)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __tune __flow]
type: input
name: Flow:           {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __filament_change]
type: command
enable: {("pause_resume" in printer)}
name: Change Filament
gcode: M600
	
[menu __main __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    {% if "pause_resume" in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu __main __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Pause printing
gcode:
    {% if "pause_resume" in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}
	
[menu __main __cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Cancel printing
gcode:
    {% if 'pause_resume' in printer %}
        CANCEL_PRINT
    {% else %}
        M25
        M27
        M26 S0
        TURN_OFF_HEATERS
        {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
            G91
            G0 Z5 F1000
            G90
        {% endif %}
    {% endif %}
    {menu.exit()}
	
### menu temperature ###
[menu __main __preheat]
type: list
name: Preheat
enable: {not printer.idle_timeout.state == "Printing"}

[menu __main __preheat __cooldown]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown
gcode:
    M104 S0
    M140 S0
    {menu.exit()}
	
[menu __main __preheat __part_removal]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Part Removal (55)
gcode:
    M104 S0
    M140 S55
    {menu.exit()}
	
[menu __main __preheat __preheat_pla]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: PLA  (215/60)
gcode:
    M140 S60
    M104 S215
    {menu.exit()}
	
[menu __main __preheat __preheat_petg]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: PETG (230/85)
gcode:
    M140 S85
    M104 S230
    {menu.exit()}
	
[menu __main __preheat __preheat_abs]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: ABS  (255/100)
gcode:
    M140 S100
    M104 S255
    {menu.exit()}
	
[menu __main __preheat __preheat_asa]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: ASA  (260/100)
gcode:
    M140 S100
    M104 S260
    {menu.exit()}
	
[menu __main __preheat __nozzle_cooldown]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Nozzle Cooldown
gcode:
    M104 S0
    {menu.exit()}
	
[menu __main __preheat __nozzle_cleaning]
type: command
enable: {('extruder' in printer)}
name: Nozzle Cleaning
gcode:
    M104 S150
    {menu.exit()}
	
[menu __main __preheat __nozzle_swap]
type: command
enable: {('extruder' in printer)}
name: Nozzle Swap
gcode:
    M104 S285
    {menu.exit()}
	
[menu __main __loadf]
type: command
name: Load Filament
enable: {('virtual_sdcard' in printer) and ((not printer.idle_timeout.state == "Printing") or printer.print_stats.state == "paused")}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    #M83
    #G1 E50 F960
	load_filament
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __unloadf]
type: command
name: Unload Filament
enable: {('virtual_sdcard' in printer) and ((not printer.idle_timeout.state == "Printing") or printer.print_stats.state == "paused")}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    #M83
    #G1 E-50 F960
	unload_filament
    RESTORE_GCODE_STATE NAME=__filament__load
	
[menu __main __purgef]
type: command
name: Purge Filament
enable: {('virtual_sdcard' in printer) and ((not printer.idle_timeout.state == "Printing") or printer.print_stats.state == "paused")}
gcode:
	SAVE_GCODE_STATE NAME=__filament__load
	purge_filament
	RESTORE_GCODE_STATE NAME=__filament__load

	
### menu settings ###
[menu __main __settings]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Settings

[menu __main __settings __temperature]
type: list
name: Temperature

[menu __main __settings __temperature __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Nozzle:         %3.0f" % (menu.input)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __settings __temperature __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:            %3.0f" % (menu.input)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}
	
[menu __main __settings __temperature __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed:      {'%3d' % (menu.input*255)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}
	
[menu __main __settings __move_1mm]
type: list
name: Move axis
enable: {not printer.idle_timeout.state == "Printing"}

[menu __main __settings __move_1mm __top_right]
type: command
name: Go to top-right
gcode:
    G28
    G1 X248 Y200 Z200
    M84


[menu __main __settings __move_1mm __axis_x]
type: input
name: Move X:       {'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
realtime: True
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __settings __move_1mm __axis_y]
type: input
name: Move Y:       {'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
realtime: True
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __settings __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:       {'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
realtime: True
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __settings __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:      {'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
realtime: True
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis
	
[menu __main __settings __disable]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Disable steppers
gcode:
    M84
    M18
	
### menu calibration ###
[menu __main __calibration]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Calibration

[menu __main __calibration __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Auto home
gcode: G28

# Prusa's calibrate Z
[menu __main __calibration __calibrate_z]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Calibrate Z
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G1 X0 Y0
    G1 Z{max_z} F2000 #Update with Z height.
    FORCE_MOVE STEPPER=stepper_z Distance=10 Velocity=10
    G1 Z{max_z-20} F2000 # Move down
    G28 # Home again

[menu __main __calibration __mesh_leveling]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Mesh Bed Leveling
gcode: 
	BED_MESH_CLEAR
	BED_MESH_CALIBRATE 
	
[menu __main __calibration __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Nozzle PID    (240)
gcode: PID_CALIBRATE HEATER=extruder TARGET=240 WRITE_FILE=1

[menu __main __calibration __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Bed PID       (100)
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1

[menu __main __save_config]
type: command
name: Save Config
gcode: SAVE_CONFIG

### menu support ###
[menu __main __support]
type: list
name: Support

[menu __main __support __dump]
type: command
name: Dump params (to PC)
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}


# TEST CUSTOM LCD MENU ------------------------------------------------------END
